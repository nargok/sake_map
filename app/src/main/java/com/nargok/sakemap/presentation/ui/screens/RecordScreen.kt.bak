package com.nargok.sakemap.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.outlined.Star
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.nargok.sakemap.data.DrinkType
import com.nargok.sakemap.utils.getDrinkTypeText
import java.time.LocalDate
import java.time.format.DateTimeFormatter

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RecordScreen(
    onSave: (String, DrinkType, String, Int, LocalDate) -> Unit = { _, _, _, _, _ -> }
) {
    var drinkName by remember { mutableStateOf(TextFieldValue("")) }
    var selectedDrinkType by remember { mutableStateOf<DrinkType?>(null) }
    var selectedPrefecture by remember { mutableStateOf<String?>(null) }
    var rating by remember { mutableIntStateOf(0) }
    var selectedDate by remember { mutableStateOf(LocalDate.now()) }
    var showDrinkTypeDropdown by remember { mutableStateOf(false) }
    var showPrefectureDropdown by remember { mutableStateOf(false) }
    var showDatePicker by remember { mutableStateOf(false) }
    
    // Validation states
    var drinkNameError by remember { mutableStateOf<String?>(null) }
    var drinkTypeError by remember { mutableStateOf<String?>(null) }
    var prefectureError by remember { mutableStateOf<String?>(null) }
    var ratingError by remember { mutableStateOf<String?>(null) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Header
        Text(
            text = "お酒を記録",
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold
        )

        // Photo capture area
        PhotoCaptureArea(
            modifier = Modifier.fillMaxWidth()
        )

        // Drink name input
        Column {
            OutlinedTextField(
                value = drinkName,
                onValueChange = { 
                    drinkName = it
                    drinkNameError = validateDrinkName(it.text)
                },
                label = { Text("銘柄名") },
                modifier = Modifier.fillMaxWidth(),
                isError = drinkNameError != null,
                supportingText = drinkNameError?.let { { Text(it, color = MaterialTheme.colorScheme.error) } }
            )
        }

        // Drink type dropdown
        Column {
            ExposedDropdownMenuBox(
                expanded = showDrinkTypeDropdown,
                onExpandedChange = { showDrinkTypeDropdown = it }
            ) {
                OutlinedTextField(
                    value = selectedDrinkType?.let { getDrinkTypeText(it) } ?: "",
                    onValueChange = {},
                    readOnly = true,
                    label = { Text("お酒の種類") },
                    trailingIcon = {
                        Icon(Icons.Default.ArrowDropDown, contentDescription = null)
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .menuAnchor(),
                    isError = drinkTypeError != null
                )
                
                ExposedDropdownMenu(
                    expanded = showDrinkTypeDropdown,
                    onDismissRequest = { showDrinkTypeDropdown = false }
                ) {
                    DrinkType.entries.forEach { drinkType ->
                        DropdownMenuItem(
                            text = { Text(getDrinkTypeText(drinkType)) },
                            onClick = {
                                selectedDrinkType = drinkType
                                drinkTypeError = null
                                showDrinkTypeDropdown = false
                            }
                        )
                    }
                }
            }
            drinkTypeError?.let {
                Text(
                    text = it,
                    color = MaterialTheme.colorScheme.error,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.padding(start = 16.dp, top = 4.dp)
                )
            }
        }

        // Prefecture dropdown
        Column {
            ExposedDropdownMenuBox(
                expanded = showPrefectureDropdown,
                onExpandedChange = { showPrefectureDropdown = it }
            ) {
                OutlinedTextField(
                    value = selectedPrefecture ?: "",
                    onValueChange = {},
                    readOnly = true,
                    label = { Text("都道府県") },
                    trailingIcon = {
                        Icon(Icons.Default.ArrowDropDown, contentDescription = null)
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .menuAnchor(),
                    isError = prefectureError != null
                )
                
                ExposedDropdownMenu(
                    expanded = showPrefectureDropdown,
                    onDismissRequest = { showPrefectureDropdown = false }
                ) {
                    getPrefectures().forEach { prefecture ->
                        DropdownMenuItem(
                            text = { Text(prefecture) },
                            onClick = {
                                selectedPrefecture = prefecture
                                prefectureError = null
                                showPrefectureDropdown = false
                            }
                        )
                    }
                }
            }
            prefectureError?.let {
                Text(
                    text = it,
                    color = MaterialTheme.colorScheme.error,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.padding(start = 16.dp, top = 4.dp)
                )
            }
        }

        // Rating selection
        Column {
            Text(
                text = "評価",
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium
            )
            
            Row(
                modifier = Modifier.padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                repeat(5) { index ->
                    Icon(
                        imageVector = if (index < rating) Icons.Filled.Star else Icons.Outlined.Star,
                        contentDescription = "${index + 1}つ星",
                        tint = if (index < rating) Color(0xFFFFD700) else MaterialTheme.colorScheme.outline,
                        modifier = Modifier
                            .size(32.dp)
                            .clickable {
                                rating = index + 1
                                ratingError = null
                            }
                    )
                }
            }
            
            ratingError?.let {
                Text(
                    text = it,
                    color = MaterialTheme.colorScheme.error,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }
        }

        // Date picker
        Column {
            OutlinedTextField(
                value = selectedDate.format(DateTimeFormatter.ofPattern("yyyy年MM月dd日")),
                onValueChange = {},
                readOnly = true,
                label = { Text("飲んだ日付") },
                trailingIcon = {
                    IconButton(onClick = { showDatePicker = true }) {
                        Icon(Icons.Default.DateRange, contentDescription = "日付選択")
                    }
                },
                modifier = Modifier.fillMaxWidth()
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Save button
        Button(
            onClick = {
                val isValid = validateForm(
                    drinkName.text,
                    selectedDrinkType,
                    selectedPrefecture,
                    rating
                ) { nameError, typeError, prefError, rateError ->
                    drinkNameError = nameError
                    drinkTypeError = typeError
                    prefectureError = prefError
                    ratingError = rateError
                }
                
                if (isValid && selectedDrinkType != null && selectedPrefecture != null) {
                    onSave(drinkName.text, selectedDrinkType!!, selectedPrefecture!!, rating, selectedDate)
                }
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.primary
            )
        ) {
            Text("保存", style = MaterialTheme.typography.titleMedium)
        }
    }

    // Date picker dialog (placeholder)
    if (showDatePicker) {
        AlertDialog(
            onDismissRequest = { showDatePicker = false },
            title = { Text("日付を選択") },
            text = { Text("実際の実装では DatePickerDialog を使用します") },
            confirmButton = {
                TextButton(onClick = { showDatePicker = false }) {
                    Text("OK")
                }
            }
        )
    }
}

@Composable
fun PhotoCaptureArea(
    modifier: Modifier = Modifier
) {
    var hasPhoto by remember { mutableStateOf(false) }
    
    Box(
        modifier = modifier
            .height(200.dp)
            .clip(RoundedCornerShape(12.dp))
            .background(MaterialTheme.colorScheme.surfaceVariant)
            .border(
                1.dp,
                MaterialTheme.colorScheme.outline,
                RoundedCornerShape(12.dp)
            )
            .clickable { hasPhoto = !hasPhoto },
        contentAlignment = Alignment.Center
    ) {
        if (hasPhoto) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "📷",
                    style = MaterialTheme.typography.displayMedium
                )
                Text(
                    text = "撮影済み写真",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Text(
                    text = "タップで再撮影",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        } else {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Icon(
                    Icons.Default.Add,
                    contentDescription = "カメラ",
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.size(48.dp)
                )
                Text(
                    text = "写真を撮影",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Text(
                    text = "タップしてカメラを起動",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}


fun getPrefectures(): List<String> {
    return listOf(
        "北海道", "青森県", "岩手県", "宮城県", "秋田県", "山形県", "福島県",
        "茨城県", "栃木県", "群馬県", "埼玉県", "千葉県", "東京都", "神奈川県",
        "新潟県", "富山県", "石川県", "福井県", "山梨県", "長野県", "岐阜県",
        "静岡県", "愛知県", "三重県", "滋賀県", "京都府", "大阪府", "兵庫県",
        "奈良県", "和歌山県", "鳥取県", "島根県", "岡山県", "広島県", "山口県",
        "徳島県", "香川県", "愛媛県", "高知県", "福岡県", "佐賀県", "長崎県",
        "熊本県", "大分県", "宮崎県", "鹿児島県", "沖縄県"
    )
}

fun validateDrinkName(name: String): String? {
    return when {
        name.isBlank() -> "銘柄名を入力してください"
        name.length > 50 -> "銘柄名は50文字以内で入力してください"
        else -> null
    }
}

fun validateForm(
    drinkName: String,
    drinkType: DrinkType?,
    prefecture: String?,
    rating: Int,
    onValidationResult: (String?, String?, String?, String?) -> Unit
): Boolean {
    val nameError = validateDrinkName(drinkName)
    val typeError = if (drinkType == null) "お酒の種類を選択してください" else null
    val prefError = if (prefecture == null) "都道府県を選択してください" else null
    val ratingError = if (rating == 0) "評価を選択してください" else null
    
    onValidationResult(nameError, typeError, prefError, ratingError)
    
    return nameError == null && typeError == null && prefError == null && ratingError == null
}

@Preview(showBackground = true)
@Composable
fun RecordScreenPreview() {
    MaterialTheme {
        RecordScreen()
    }
}

@Preview(showBackground = true)
@Composable
fun PhotoCaptureAreaPreview() {
    MaterialTheme {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text("写真なし:")
            PhotoCaptureArea(modifier = Modifier.fillMaxWidth())
        }
    }
}